{"version":3,"sources":["renderer/tree.ts","renderer/renderBase.tsx","hooks.ts","defaultText.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SyntaxTreeNode","tokens","create_root","token","nester_tokens","parent","children","this","_set_children_from_tokens","length","AssertionError","message","inline_token","nesting","opening","closing","slice","reversed_tokens","reverse","pop","nested_tokens","push","_add_child","child","subchild","subchildren","walk","next","done","value","type","replace","_attribute_token","tag","attrs","reduce","prev","key","map","level","content","markup","info","meta","block","hidden","RenderContext","React","createContext","options","env","MarkdownItRenderer","props","MarkdownIt","presetName","parse","source","tree","Provider","NodeChildren","node","defaultProps","baseRenderers","paragraph","Paragraph","index","inline","Inline","text","Text","bullet_list","BulletList","ordered_list","OrderedList","list_item","ListItem","em","Em","softbreak","Softbreak","hardbreak","Hardbreak","strong","Strong","blockquote","Blockquote","hr","Hr","code_inline","CodeInline","code_block","CodeBlock","fence","Fence","heading","Heading","link","Link","autolink","Autolink","html_inline","HtmlInline","html_block","HtmlBlock","image","Image","s","StrikeThrough","table","Table","thead","TableHead","tbody","TableBody","tr","TableRow","td","TableCell","th","TableHeadCell","renderers","rendered","console","error","start","useContext","breaks","highlighting","trim","langName","split","language","href","undefined","dangerouslySetInnerHTML","__html","alt","src","style","endsWith","textAlign","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","defaultText","html","default","tooltip","linkify","typographer","TopBar","classes","AppBar","position","Toolbar","Typography","variant","className","IconButton","color","target","GitHubIcon","SvgIcon","d","App","useTheme","useState","sourceText","setSourceText","throttledSourceText","setThrottledSourceText","throttledSourceChange","useCallback","throttle","setPresetName","initValues","values","setValues","e","checked","name","useForm","Object","entries","p","k","v","parseOptions","setParseOptions","resetParseOptions","Paper","padding","Grid","container","item","xs","FormControl","component","FormLabel","FormGroup","aria-label","row","Tooltip","FormControlLabel","label","control","Checkbox","onChange","marginLeft","minWidth","InputLabel","Select","labelId","id","event","MenuItem","Button","onClick","startIcon","Restore","float","md","TextField","placeholder","multiline","fullWidth","rowsMax","height","overflow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1adeff16.chunk.js","sourcesContent":["/**\n * Ported from https://github.com/executablebooks/markdown-it-py/blob/master/markdown_it/tree.py\n */\nimport { AssertionError } from 'assert'\n\nimport Token from 'markdown-it/lib/token'\n\ninterface _NesterTokens {\n  opening: Token\n  closing: Token\n}\n\n/** A Markdown syntax tree node.\n\nA class that can be used to construct a tree representation of a linear\n`markdown-it` token stream.\n\nEach node in the tree represents either:\n  - root of the Markdown document\n  - a single unnested `Token`\n  - a `Token` \"_open\" and \"_close\" token pair, and the tokens nested in\n      between\n*/\nexport default class SyntaxTreeNode {\n  private token: null | Token = null\n  private nester_tokens: null | _NesterTokens = null\n  public parent: null | SyntaxTreeNode = null\n  public children: SyntaxTreeNode[] = []\n\n  constructor(tokens: Token[], create_root = true) {\n    tokens = [...tokens]\n    if (create_root) {\n      this._set_children_from_tokens(tokens)\n      return\n    }\n\n    if (tokens.length === 0) {\n      throw new AssertionError({\n        message:\n          'Can only create root from empty token sequence. Set `create_root=True`.'\n      })\n    }\n\n    if (tokens.length === 1) {\n      const inline_token = tokens[0]\n      if (inline_token.nesting) {\n        throw new AssertionError({\n          message: 'Unequal nesting level at the start and end of token stream.'\n        })\n      }\n      this.token = inline_token\n      if (inline_token.children) {\n        this._set_children_from_tokens(inline_token.children)\n      }\n    } else {\n      this.nester_tokens = { opening: tokens[0], closing: tokens[tokens.length - 1] }\n      this._set_children_from_tokens(tokens.slice(1, tokens.length - 1))\n    }\n  }\n\n  /** Convert the token stream to a tree structure and set the resulting\n      nodes as children of `self`. \n  */\n  _set_children_from_tokens(tokens: Token[]): void {\n    const reversed_tokens = tokens.reverse()\n\n    while (reversed_tokens.length !== 0) {\n      let token = reversed_tokens.pop() as Token\n\n      if (!token.nesting) {\n        this._add_child([token])\n        continue\n      }\n      if (token.nesting !== 1) {\n        throw new AssertionError({ message: 'Invalid token nesting' })\n      }\n\n      const nested_tokens = [token]\n      let nesting = 1\n      while (reversed_tokens.length && nesting) {\n        token = reversed_tokens.pop() as Token\n        nested_tokens.push(token)\n        nesting += token.nesting\n      }\n      if (nesting) {\n        throw new AssertionError({\n          message: `unclosed tokens starting ${nested_tokens[0]}`\n        })\n      }\n\n      this._add_child(nested_tokens)\n    }\n  }\n\n  /** Make a child node for instance */\n  _add_child(tokens: Token[]): void {\n    const child = new SyntaxTreeNode(tokens, false)\n    child.parent = this\n    this.children.push(child)\n  }\n\n  /** Return the `Token` that is used as the data source for the\n  properties defined below. */\n  _attribute_token(): Token {\n    if (this.token) {\n      return this.token\n    }\n    if (this.nester_tokens) {\n      return this.nester_tokens.opening\n    }\n    throw new AssertionError({\n      message: 'Root node does not have the accessed attribute'\n    })\n  }\n\n  /** Recursively yield all descendant nodes in the tree starting at self.\n\n  The order mimics the order of the underlying linear token\n  stream (i.e. depth first).\n  */\n  *walk(include_self = true): Generator<SyntaxTreeNode> {\n    if (include_self) {\n      yield this\n    }\n    for (const child of this.children) {\n      let subchild\n      const subchildren = child.walk(true)\n      while (!(subchild = subchildren.next()).done) {\n        yield subchild.value\n      }\n    }\n  }\n\n  public get type(): string {\n    if (this.token !== null) {\n      return this.token.type\n    }\n    if (this.nester_tokens !== null) {\n      return this.nester_tokens.opening.type.replace(/_open$/, '')\n    }\n    return 'root'\n  }\n\n  /** Get a string type of the represented syntax.\n\n    - \"root\" for root nodes\n    - `Token.type` if the node represents an unnested token\n    - `Token.type` of the opening token, with \"_open\" suffix stripped, \n      if the node represents a nester token pair\n  */\n  public get tag(): string {\n    /**html tag name, e.g. \\\"p\\ */\n    return this._attribute_token().tag\n  }\n\n  /** Html attributes. */\n  public get attrs(): { [key: string]: string | number } {\n    const attrs = this._attribute_token().attrs\n    if (!attrs) {\n      return {}\n    }\n    return attrs.reduce((prev, [key, value]) => {\n      prev[key] = value\n      return prev\n    }, {} as { [key: string]: string })\n  }\n\n  /** Source map info. Format: `Tuple[ line_begin, line_end ]` */\n  public get map(): null | [number, number] {\n    return this._attribute_token().map\n  }\n\n  /** nesting level, the same as `state.level` */\n  public get level(): number {\n    return this._attribute_token().level\n  }\n\n  /** In a case of self-closing tag (code, html, fence, etc.), it\n    has contents of this tag. */\n  public get content(): string {\n    return this._attribute_token().content\n  }\n\n  /** '*' or '_' for emphasis, fence string for fence, etc. */\n  public get markup(): string {\n    return this._attribute_token().markup\n  }\n\n  public get info(): string {\n    /**fence infostring */\n    return this._attribute_token().info\n  }\n\n  /** A place for plugins to store an arbitrary data. */\n  public get meta(): any {\n    return this._attribute_token().meta\n  }\n\n  /** True for block-level tokens, false for inline tokens. */\n  public get block(): boolean {\n    return this._attribute_token().block\n  }\n\n  /** If it's true, ignore this element when rendering.\n    Used for tight lists to hide paragraphs. */\n  public get hidden(): boolean {\n    return this._attribute_token().hidden\n  }\n}\n","/** This is the baseline renderer\n * for converting Markdown to React components via markdown-it.\n * It includes no plugins and renders to basic React primitives\n */\n\nimport React, { useContext } from 'react'\n\nimport MarkdownIt from 'markdown-it'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\n\nimport SyntaxTreeNode from './tree'\n\nexport interface IParseOptions {\n  html?: boolean\n  xhtmlOut?: boolean\n  breaks?: boolean\n  langPrefix?: string\n  linkify?: boolean\n  typographer?: boolean\n  quotes?: string | string[]\n  highlighting?: boolean\n  [key: string]: any\n}\n\nexport type TPresetName = 'default' | 'zero' | 'commonmark'\n\nexport interface IRenderProps {\n  node: SyntaxTreeNode\n}\n\nexport interface childProps {\n  index: number\n  child: SyntaxTreeNode\n}\n\n/** A context from which components can access the MarkdownIt options and env */\nconst RenderContext = React.createContext<{ options: IParseOptions; env: any }>({\n  options: {},\n  env: {}\n})\n\n/** The principle renderer component */\nexport default function MarkdownItRenderer(props: {\n  source: string\n  presetName: TPresetName\n  options: IParseOptions\n}): JSX.Element {\n  const md = new MarkdownIt(props.presetName, props.options || {})\n  const env = {}\n  const tokens = md.parse(props.source, env)\n  const tree = new SyntaxTreeNode(tokens)\n\n  return (\n    <RenderContext.Provider value={{ options: props.options, env }}>\n      <NodeChildren node={tree} />\n    </RenderContext.Provider>\n  )\n}\n\nMarkdownItRenderer.defaultProps = {\n  presetName: 'default',\n  options: {}\n}\n\n/** mapping of token types to renderers */\nexport const baseRenderers: {\n  [key: string]: (props: childProps) => JSX.Element\n} = {\n  paragraph: props => <Paragraph key={props.index} node={props.child} />,\n  inline: props => <Inline key={props.index} node={props.child} />,\n  text: props => <Text key={props.index} node={props.child} />,\n  bullet_list: props => <BulletList key={props.index} node={props.child} />,\n  ordered_list: props => <OrderedList key={props.index} node={props.child} />,\n  list_item: props => <ListItem key={props.index} node={props.child} />,\n  em: props => <Em key={props.index} node={props.child} />,\n  softbreak: props => <Softbreak key={props.index} />,\n  hardbreak: props => <Hardbreak key={props.index} />,\n  strong: props => <Strong key={props.index} node={props.child} />,\n  blockquote: props => <Blockquote key={props.index} node={props.child} />,\n  hr: props => <Hr key={props.index} />,\n  code_inline: props => <CodeInline key={props.index} node={props.child} />,\n  code_block: props => <CodeBlock key={props.index} node={props.child} />,\n  fence: props => <Fence key={props.index} node={props.child} />,\n  heading: props => <Heading key={props.index} node={props.child} />,\n  link: props => <Link key={props.index} node={props.child} />,\n  autolink: props => <Autolink key={props.index} node={props.child} />,\n  html_inline: props => <HtmlInline key={props.index} node={props.child} />,\n  html_block: props => <HtmlBlock key={props.index} node={props.child} />,\n  image: props => <Image key={props.index} node={props.child} />,\n  // extended\n  s: props => <StrikeThrough key={props.index} node={props.child} />,\n  table: props => <Table key={props.index} node={props.child} />,\n  thead: props => <TableHead key={props.index} node={props.child} />,\n  tbody: props => <TableBody key={props.index} node={props.child} />,\n  tr: props => <TableRow key={props.index} node={props.child} />,\n  td: props => <TableCell key={props.index} node={props.child} />,\n  th: props => <TableHeadCell key={props.index} node={props.child} />\n}\n\n/** Component to render children of a node */\nfunction NodeChildren({ node }: { node: SyntaxTreeNode }): JSX.Element {\n  const renderers = baseRenderers\n  const rendered: JSX.Element[] = []\n  for (let index = 0; index < node.children.length; index++) {\n    const child = node.children[index]\n    if (child.hidden) {\n      // Tight list paragraphs\n    } else if (!(child.type in renderers)) {\n      console.error(`no render component for type ${child.type}`)\n    } else {\n      rendered.push(renderers[child.type]({ index, child }))\n    }\n  }\n  return <>{rendered}</>\n}\n\nfunction Paragraph(props: IRenderProps): JSX.Element {\n  return (\n    <p>\n      <NodeChildren node={props.node} />\n    </p>\n  )\n}\n\nfunction Inline(props: IRenderProps): JSX.Element {\n  return (\n    <>\n      <NodeChildren node={props.node} />\n    </>\n  )\n}\n\nfunction Text(props: IRenderProps): JSX.Element {\n  return <>{props.node.content}</>\n}\n\nfunction BulletList(props: IRenderProps): JSX.Element {\n  return (\n    <ul>\n      <NodeChildren node={props.node} />\n    </ul>\n  )\n}\n\nfunction OrderedList(props: IRenderProps): JSX.Element {\n  return (\n    <ol start={props.node.attrs.start as number | undefined}>\n      <NodeChildren node={props.node} />\n    </ol>\n  )\n}\n\nfunction ListItem(props: IRenderProps): JSX.Element {\n  return (\n    <li>\n      <NodeChildren node={props.node} />\n    </li>\n  )\n}\n\nfunction Em(props: IRenderProps): JSX.Element {\n  return (\n    <em>\n      <NodeChildren node={props.node} />\n    </em>\n  )\n}\n\nfunction Softbreak(): JSX.Element {\n  const context = useContext(RenderContext)\n  if (context.options?.breaks) {\n    return <br />\n  }\n  return <>{'\\n'}</>\n}\n\nfunction Hardbreak(): JSX.Element {\n  return <br />\n}\n\nfunction Strong(props: IRenderProps): JSX.Element {\n  return (\n    <strong>\n      <NodeChildren node={props.node} />\n    </strong>\n  )\n}\n\nfunction Blockquote(props: IRenderProps): JSX.Element {\n  return (\n    <blockquote>\n      <NodeChildren node={props.node} />\n    </blockquote>\n  )\n}\n\nfunction Hr(): JSX.Element {\n  return <hr />\n}\n\nfunction CodeInline(props: IRenderProps): JSX.Element {\n  return <code>{props.node.content}</code>\n}\n\nfunction CodeBlock(props: IRenderProps): JSX.Element {\n  return (\n    <pre>\n      <code>{props.node.content}</code>\n    </pre>\n  )\n}\n\nfunction Fence(props: IRenderProps): JSX.Element {\n  const context = useContext(RenderContext)\n  if (!context.options.highlighting || !props.node.info.trim()) {\n    return (\n      <pre>\n        <code>{props.node.content}</code>\n      </pre>\n    )\n  }\n  const info = props.node.info.trim().split(' ', 1)\n  const langName = info[0]\n  // TODO this is not performant for large file:\n  // https://github.com/react-syntax-highlighter/react-syntax-highlighter/issues/302\n  return <SyntaxHighlighter language={langName}>{props.node.content}</SyntaxHighlighter>\n}\n\nfunction Heading(props: IRenderProps): JSX.Element {\n  switch (props.node.tag) {\n    case 'h1':\n      return (\n        <h1>\n          <NodeChildren node={props.node} />\n        </h1>\n      )\n    case 'h2':\n      return (\n        <h2>\n          <NodeChildren node={props.node} />\n        </h2>\n      )\n    case 'h3':\n      return (\n        <h3>\n          <NodeChildren node={props.node} />\n        </h3>\n      )\n    case 'h4':\n      return (\n        <h4>\n          <NodeChildren node={props.node} />\n        </h4>\n      )\n    case 'h5':\n      return (\n        <h5>\n          <NodeChildren node={props.node} />\n        </h5>\n      )\n    case 'h6':\n      return (\n        <h6>\n          <NodeChildren node={props.node} />\n        </h6>\n      )\n    default:\n      console.error(`unexpected tag: ${props.node.tag}`)\n  }\n  return <></>\n}\n\nfunction Link(props: IRenderProps): JSX.Element {\n  return (\n    <a href={props.node.attrs.href ? `${props.node.attrs.href}` : undefined}>\n      <NodeChildren node={props.node} />\n    </a>\n  )\n}\n\nfunction Autolink(props: IRenderProps): JSX.Element {\n  return (\n    <a href={props.node.attrs.href ? `${props.node.attrs.href}` : undefined}>\n      <NodeChildren node={props.node} />\n    </a>\n  )\n}\n\nfunction HtmlInline(props: IRenderProps): JSX.Element {\n  // TODO weirdly here it is splitting e.g. <em>a</em> into html+text+html\n  // it doesn't do this for block HTML\n  return (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: `<${props.node.tag}>${props.node.content}</${props.node.tag}>`\n      }}\n    />\n  )\n}\n\nfunction HtmlBlock(props: IRenderProps): JSX.Element {\n  // TODO see HtmlInline\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html: `<${props.node.tag}>${props.node.content}</${props.node.tag}>`\n      }}\n    />\n  )\n}\n\nfunction Image(props: IRenderProps): JSX.Element {\n  return (\n    <img\n      alt={props.node.content}\n      src={props.node.attrs.src ? `${props.node.attrs.src}` : undefined}\n    />\n  )\n}\n\nfunction StrikeThrough(props: IRenderProps): JSX.Element {\n  return (\n    <s>\n      <NodeChildren node={props.node} />\n    </s>\n  )\n}\n\nfunction Table(props: IRenderProps): JSX.Element {\n  return (\n    <table>\n      <NodeChildren node={props.node} />\n    </table>\n  )\n}\n\nfunction TableHead(props: IRenderProps): JSX.Element {\n  return (\n    <thead>\n      <NodeChildren node={props.node} />\n    </thead>\n  )\n}\n\nfunction TableBody(props: IRenderProps): JSX.Element {\n  return (\n    <tbody>\n      <NodeChildren node={props.node} />\n    </tbody>\n  )\n}\n\nfunction TableRow(props: IRenderProps): JSX.Element {\n  return (\n    <tr>\n      <NodeChildren node={props.node} />\n    </tr>\n  )\n}\n\nfunction TableCell(props: IRenderProps): JSX.Element {\n  const style: { textAlign?: 'center' | 'left' | 'right' } = {}\n  if (typeof props.node.attrs.style === 'string') {\n    if (props.node.attrs.style.endsWith('center')) {\n      style.textAlign = 'center'\n    } else if (props.node.attrs.style.endsWith('left')) {\n      style.textAlign = 'left'\n    } else if (props.node.attrs.style.endsWith('right')) {\n      style.textAlign = 'right'\n    }\n  }\n  return (\n    <td style={style}>\n      <NodeChildren node={props.node} />\n    </td>\n  )\n}\n\nfunction TableHeadCell(props: IRenderProps): JSX.Element {\n  const style = {}\n  if (props.node.attrs.style) {\n  }\n  return (\n    <th style={style}>\n      <NodeChildren node={props.node} />\n    </th>\n  )\n}\n","import { useState } from 'react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    }\n  })\n)\n\nexport function useForm(initValues: {\n  [key: string]: any\n}): [{ [key: string]: any }, (e: any, checked: boolean) => void, () => void] {\n  const [values, setValues] = useState(initValues)\n  return [\n    values,\n    (e: any, checked: boolean) => {\n      setValues({ ...values, [e.target.name]: checked })\n    },\n    () => setValues(initValues)\n  ]\n}\n","// annoyingly we are restricted to es5 which does not have multiline strings\nexport const defaultText =\n  '\\\n# h1 Heading\\n\\\n## h2 Heading\\n\\\n### h3 Heading\\n\\\n#### h4 Heading\\n\\\n##### h5 Heading\\n\\\n###### h6 Heading\\n\\\n\\n\\\n\\n\\\n## Horizontal Rules\\n\\\n\\n\\\n___\\n\\\n\\n\\\n---\\n\\\n\\n\\\n***\\n\\\n\\n\\\n\\n\\\n## Typographic replacements\\n\\\n\\n\\\nEnable typographer option to see result.\\n\\\n\\n\\\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\\n\\\n\\n\\\ntest.. test... test..... test?..... test!....\\n\\\n\\n\\\n!!!!!! ???? ,,  -- ---\\n\\\n\\n\\\n\"Smartypants, double quotes\" and \\'single quotes\\'\\n\\\n\\n\\\n\\n\\\n## Emphasis\\n\\\n\\n\\\n**This is bold text**\\n\\\n\\n\\\n__This is bold text__\\n\\\n\\n\\\n*This is italic text*\\n\\\n\\n\\\n_This is italic text_\\n\\\n\\n\\\n~~Strikethrough~~\\n\\\n\\n\\\n\\n\\\n## Blockquotes\\n\\\n\\n\\\n\\n\\\n> Blockquotes can also be nested...\\n\\\n>> ...by using additional greater-than signs right next to each other...\\n\\\n> > > ...or with spaces between arrows.\\n\\\n\\n\\\n\\n\\\n## Lists\\n\\\n\\n\\\nUnordered\\n\\\n\\n\\\n+ Create a list by starting a line with `+`, `-`, or `*`\\n\\\n+ Sub-lists are made by indenting 2 spaces:\\n\\\n  - Marker character change forces new list start:\\n\\\n    * Ac tristique libero volutpat at\\n\\\n    + Facilisis in pretium nisl aliquet\\n\\\n    - Nulla volutpat aliquam velit\\n\\\n+ Very easy!\\n\\\n\\n\\\nOrdered\\n\\\n\\n\\\n1. Lorem ipsum dolor sit amet\\n\\\n2. Consectetur adipiscing elit\\n\\\n3. Integer molestie lorem at massa\\n\\\n\\n\\\n\\n\\\n1. You can use sequential numbers...\\n\\\n1. ...or keep all the numbers as `1.`\\n\\\n\\n\\\nStart numbering with offset:\\n\\\n\\n\\\n57. foo\\n\\\n1. bar\\n\\\n\\n\\\n\\n\\\n## Code\\n\\\n\\n\\\nInline `code`\\n\\\n\\n\\\nIndented code\\n\\\n\\n\\\n    // Some comments\\n\\\n    line 1 of code\\n\\\n    line 2 of code\\n\\\n    line 3 of code\\n\\\n\\n\\\n\\n\\\nBlock code \"fences\"\\n\\\n\\n\\\n```\\n\\\nSample text here...\\n\\\n```\\n\\\n\\n\\\nSyntax highlighting\\n\\\n\\n\\\n``` js\\n\\\nvar foo = function (bar) {\\n\\\n  return bar++;\\n\\\n};\\n\\\n\\n\\\nconsole.log(foo(5));\\n\\\n```\\n\\\n\\n\\\n## Tables\\n\\\n\\n\\\n| Option | Description |\\n\\\n| ------ | ----------- |\\n\\\n| data   | path to data files to supply the data that will be passed into templates. |\\n\\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n\\\n| ext    | extension to be used for dest files. |\\n\\\n\\n\\\nRight aligned columns\\n\\\n\\n\\\n| Option | Description |\\n\\\n| ------:| -----------:|\\n\\\n| data   | path to data files to supply the data that will be passed into templates. |\\n\\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n\\\n| ext    | extension to be used for dest files. |\\n\\\n\\n\\\n\\n\\\n## Links\\n\\\n\\n\\\n[link text](http://dev.nodeca.com)\\n\\\n\\n\\\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\\n\\\n\\n\\\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\\n\\\n\\n\\\n\\n\\\n## Images\\n\\\n\\n\\\n![Minion](https://octodex.github.com/images/minion.png)\\n\\\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\\n\\\n\\n\\\nLike links, Images also have a footnote style syntax\\n\\\n\\n\\\n![Alt text][id]\\n\\\n\\n\\\nWith a reference later in the document defining the URL location:\\n\\\n\\n\\\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\\n\\\n\\n\\\n'\n","import React, { useCallback, useState } from 'react'\n\nimport {\n  AppBar,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  SvgIcon,\n  TextField,\n  Toolbar,\n  Tooltip,\n  Typography,\n  useTheme\n} from '@material-ui/core'\nimport { Restore } from '@material-ui/icons'\n\nimport throttle from 'lodash.throttle'\n\nimport MarkdownItRenderer, { TPresetName } from './renderer/renderBase'\nimport { useStyles, useForm } from './hooks'\nimport { defaultText } from './defaultText'\n\nconst options: {\n  [key: string]: { default: boolean; tooltip?: string; alias?: string }\n} = {\n  html: {\n    default: false,\n    tooltip: 'enable HTML tags in source text'\n  },\n  // xhtmlOut: { default: false, tooltip: 'produce xhtml output' },\n  // breaks: { default: false, tooltip: 'newlines in paragraphs are rendered as <br />' },\n  linkify: { default: true, tooltip: 'auto-convert link text to links' },\n  typographer: { default: true, tooltip: 'perform typographic replacements' },\n  highlighting: { default: true, tooltip: 'syntax highlight fences' }\n}\n\nfunction App(): JSX.Element {\n  const theme = useTheme()\n  const classes = useStyles()\n\n  // we maintain a throttled version of the source text here also, to parse to the renderer\n  // to reduce the number of times that the preview gets rendered\n  const [sourceText, setSourceText] = useState(defaultText)\n  const [throttledSourceText, setThrottledSourceText] = useState(defaultText)\n  const throttledSourceChange = useCallback(throttle(setThrottledSourceText, 300), [])\n  const handleSourceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSourceText(event.target.value)\n    throttledSourceChange(event.target.value)\n  }\n\n  const [presetName, setPresetName] = useState<TPresetName>('default')\n\n  const defaultOptions = Object.entries(options).reduce((p, [k, v]) => {\n    p[k] = v.default\n    return p\n  }, {} as any)\n\n  const [parseOptions, setParseOptions, resetParseOptions] = useForm(defaultOptions)\n\n  function reset(): void {\n    setSourceText(defaultText)\n    setThrottledSourceText(defaultText)\n    resetParseOptions()\n    setPresetName('default')\n  }\n\n  return (\n    <div className={classes.root}>\n      <TopBar />\n      <Paper style={{ padding: theme.spacing(2) }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Paper variant=\"outlined\" style={{ padding: theme.spacing(2) }}>\n              <FormControl component=\"fieldset\">\n                <FormLabel>Parsing Options</FormLabel>\n                <FormGroup aria-label=\"position\" row>\n                  {Object.entries(options).map(([key, value]) => (\n                    <Tooltip key={key} title={value.tooltip || ''}>\n                      <FormControlLabel\n                        label={key}\n                        control={\n                          <Checkbox\n                            color=\"primary\"\n                            name={key}\n                            checked={parseOptions[key]}\n                            onChange={setParseOptions}\n                          />\n                        }\n                      />\n                    </Tooltip>\n                  ))}\n                </FormGroup>\n              </FormControl>\n              <FormControl style={{ marginLeft: theme.spacing(1), minWidth: 120 }}>\n                <InputLabel>Preset Name</InputLabel>\n                <Select\n                  labelId=\"preset-name-select-label\"\n                  id=\"preset-name-select-select\"\n                  value={presetName}\n                  onChange={(\n                    event: React.ChangeEvent<{\n                      name?: string | undefined\n                      value: unknown\n                    }>\n                  ) => setPresetName(event.target.value as TPresetName)}\n                >\n                  <MenuItem value=\"default\">default</MenuItem>\n                  <MenuItem value=\"commonmark\">commonmark</MenuItem>\n                  <MenuItem value=\"zero\">zero</MenuItem>\n                </Select>\n              </FormControl>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  reset()\n                }}\n                startIcon={<Restore />}\n                style={{ float: 'right' }}\n              >\n                Reset\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper\n              // variant=\"outlined\"\n              style={{ padding: theme.spacing(2) }}\n            >\n              <TextField\n                id=\"standard-textarea\"\n                label=\"Source Text\"\n                variant=\"outlined\"\n                placeholder=\"Write text here\"\n                multiline\n                fullWidth\n                value={sourceText}\n                onChange={handleSourceChange}\n                rowsMax={50}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper\n              variant=\"outlined\"\n              style={{\n                padding: theme.spacing(2),\n                height: '80vh',\n                overflow: 'auto'\n              }}\n            >\n              <MarkdownItRenderer\n                source={throttledSourceText}\n                presetName={presetName}\n                options={parseOptions}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  )\n}\n\nfunction TopBar() {\n  const classes = useStyles()\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          MyST Demonstrator\n        </Typography>\n        <IconButton color=\"inherit\">\n          <a\n            href=\"https://github.com/executablebooks/myst-react\"\n            color=\"inherit\"\n            target=\"_blank\"\n          >\n            <GitHubIcon />\n          </a>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport function GitHubIcon(): JSX.Element {\n  return (\n    <SvgIcon>\n      <path\n        // style=\" stroke:none;fill-rule:evenodd;fill:rgb(10.588235%,12.156863%,13.72549%);fill-opacity:1;\"\n        d=\"M 12 0 C 5.371094 0 0 5.371094 0 12 C 0 17.308594 3.433594 21.796875 8.203125 23.386719 C 8.804688 23.488281 9.03125 23.128906 9.03125 22.816406 C 9.03125 22.53125 9.015625 21.585938 9.015625 20.578125 C 6 21.136719 5.21875 19.84375 4.980469 19.171875 C 4.84375 18.824219 4.261719 17.761719 3.75 17.476562 C 3.328125 17.25 2.730469 16.695312 3.734375 16.679688 C 4.679688 16.664062 5.355469 17.550781 5.578125 17.910156 C 6.660156 19.726562 8.386719 19.214844 9.074219 18.898438 C 9.179688 18.121094 9.496094 17.59375 9.839844 17.296875 C 7.171875 16.996094 4.378906 15.960938 4.378906 11.371094 C 4.378906 10.066406 4.84375 8.984375 5.609375 8.144531 C 5.488281 7.84375 5.070312 6.613281 5.730469 4.964844 C 5.730469 4.964844 6.734375 4.648438 9.03125 6.195312 C 9.988281 5.925781 11.011719 5.789062 12.03125 5.789062 C 13.050781 5.789062 14.070312 5.925781 15.03125 6.195312 C 17.324219 4.636719 18.328125 4.964844 18.328125 4.964844 C 18.988281 6.613281 18.570312 7.84375 18.449219 8.144531 C 19.214844 8.984375 19.679688 10.050781 19.679688 11.371094 C 19.679688 15.976562 16.875 16.996094 14.203125 17.296875 C 14.640625 17.671875 15.015625 18.390625 15.015625 19.515625 C 15.015625 21.121094 15 22.410156 15 22.816406 C 15 23.128906 15.226562 23.503906 15.824219 23.386719 C 20.566406 21.796875 24 17.296875 24 12 C 24 5.371094 18.628906 0 12 0 Z M 12 0 \"\n      />\n    </SvgIcon>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}