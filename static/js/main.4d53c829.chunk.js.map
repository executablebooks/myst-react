{"version":3,"sources":["renderer/tree.ts","renderer/renderBase.tsx","hooks.ts","defaultText.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SyntaxTreeNode","tokens","create_root","token","nester_tokens","parent","children","this","_set_children_from_tokens","length","AssertionError","message","inline_token","nesting","opening","closing","slice","reversed_tokens","reverse","pop","nested_tokens","push","_add_child","child","subchild","subchildren","walk","next","done","value","type","replace","_attribute_token","tag","attrs","reduce","prev","key","map","level","content","markup","info","meta","block","hidden","MarkdownItRenderer","props","env","MarkdownIt","options","parse","source","tree","NodeChildren","node","rendered","index","Paragraph","Inline","Text","BulletList","OrderedList","ListItem","Em","Softbreak","Hardbreak","Strong","Blockquote","Hr","CodeInline","CodeBlock","Fence","Heading","Link","Autolink","HtmlInline","HtmlBlock","Image","StrikeThrough","Table","TableHead","TableBody","TableRow","TableCell","TableHeadCell","console","error","start","breaks","trim","langName","split","language","href","undefined","dangerouslySetInnerHTML","__html","alt","src","style","endsWith","textAlign","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","defaultText","html","default","tooltip","linkify","typographer","TopBar","classes","AppBar","position","Toolbar","Typography","variant","className","App","useTheme","useState","sourceText","setSourceText","initValues","values","setValues","e","checked","target","name","useForm","Object","entries","p","k","v","parseOptions","setParseOptions","resetParseOptions","Paper","padding","Grid","container","item","xs","FormControl","component","FormLabel","FormGroup","aria-label","row","Tooltip","FormControlLabel","label","control","Checkbox","color","onChange","Button","onClick","startIcon","Restore","float","md","TextField","id","placeholder","multiline","fullWidth","event","rowsMax","height","overflow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d53c829.chunk.js","sourcesContent":["import { AssertionError } from 'assert'\n\nimport Token from 'markdown-it/lib/token'\n\ninterface _NesterTokens {\n  opening: Token\n  closing: Token\n}\n\n/** A Markdown syntax tree node.\n\nA class that can be used to construct a tree representation of a linear\n`markdown-it-py` token stream.\n\nEach node in the tree represents either:\n  - root of the Markdown document\n  - a single unnested `Token`\n  - a `Token` \"_open\" and \"_close\" token pair, and the tokens nested in\n      between\n*/\nexport default class SyntaxTreeNode {\n  private token: null | Token = null\n  private nester_tokens: null | _NesterTokens = null\n  public parent: null | SyntaxTreeNode = null\n  public children: SyntaxTreeNode[] = []\n\n  constructor(tokens: Token[], create_root = true) {\n    tokens = [...tokens]\n    if (create_root) {\n      this._set_children_from_tokens(tokens)\n      return\n    }\n\n    if (tokens.length === 0) {\n      throw new AssertionError({\n        message:\n          'Can only create root from empty token sequence. Set `create_root=True`.'\n      })\n    }\n\n    if (tokens.length === 1) {\n      const inline_token = tokens[0]\n      if (inline_token.nesting) {\n        throw new AssertionError({\n          message: 'Unequal nesting level at the start and end of token stream.'\n        })\n      }\n      this.token = inline_token\n      if (inline_token.children) {\n        this._set_children_from_tokens(inline_token.children)\n      }\n    } else {\n      this.nester_tokens = { opening: tokens[0], closing: tokens[tokens.length - 1] }\n      this._set_children_from_tokens(tokens.slice(1, tokens.length - 1))\n    }\n  }\n\n  /** Convert the token stream to a tree structure and set the resulting\n      nodes as children of `self`. \n  */\n  _set_children_from_tokens(tokens: Token[]): void {\n    const reversed_tokens = tokens.reverse()\n\n    while (reversed_tokens.length !== 0) {\n      let token = reversed_tokens.pop() as Token\n\n      if (!token.nesting) {\n        this._add_child([token])\n        continue\n      }\n      if (token.nesting !== 1) {\n        throw new AssertionError({ message: 'Invalid token nesting' })\n      }\n\n      const nested_tokens = [token]\n      let nesting = 1\n      while (reversed_tokens.length && nesting) {\n        token = reversed_tokens.pop() as Token\n        nested_tokens.push(token)\n        nesting += token.nesting\n      }\n      if (nesting) {\n        throw new AssertionError({\n          message: `unclosed tokens starting ${nested_tokens[0]}`\n        })\n      }\n\n      this._add_child(nested_tokens)\n    }\n  }\n\n  /** Make a child node for instance */\n  _add_child(tokens: Token[]): void {\n    const child = new SyntaxTreeNode(tokens, false)\n    child.parent = this\n    this.children.push(child)\n  }\n\n  /** Return the `Token` that is used as the data source for the\n  properties defined below. */\n  _attribute_token(): Token {\n    if (this.token) {\n      return this.token\n    }\n    if (this.nester_tokens) {\n      return this.nester_tokens.opening\n    }\n    throw new AssertionError({\n      message: 'Root node does not have the accessed attribute'\n    })\n  }\n\n  /** Recursively yield all descendant nodes in the tree starting at self.\n\n  The order mimics the order of the underlying linear token\n  stream (i.e. depth first).\n  */\n  *walk(include_self = true): Generator<SyntaxTreeNode> {\n    if (include_self) {\n      yield this\n    }\n    for (const child of this.children) {\n      let subchild\n      const subchildren = child.walk(true)\n      while (!(subchild = subchildren.next()).done) {\n        yield subchild.value\n      }\n    }\n  }\n\n  public get type(): string {\n    if (this.token !== null) {\n      return this.token.type\n    }\n    if (this.nester_tokens !== null) {\n      return this.nester_tokens.opening.type.replace(/_open$/, '')\n    }\n    return 'root'\n  }\n\n  /** Get a string type of the represented syntax.\n\n    - \"root\" for root nodes\n    - `Token.type` if the node represents an unnested token\n    - `Token.type` of the opening token, with \"_open\" suffix stripped, \n      if the node represents a nester token pair\n  */\n  public get tag(): string {\n    /**html tag name, e.g. \\\"p\\ */\n    return this._attribute_token().tag\n  }\n\n  /** Html attributes. */\n  public get attrs(): { [key: string]: string | number } {\n    const attrs = this._attribute_token().attrs\n    if (!attrs) {\n      return {}\n    }\n    return attrs.reduce((prev, [key, value]) => {\n      prev[key] = value\n      return prev\n    }, {} as { [key: string]: string })\n  }\n\n  /** Source map info. Format: `Tuple[ line_begin, line_end ]` */\n  public get map(): null | [number, number] {\n    return this._attribute_token().map\n  }\n\n  /** nesting level, the same as `state.level` */\n  public get level(): number {\n    return this._attribute_token().level\n  }\n\n  /** In a case of self-closing tag (code, html, fence, etc.), it\n    has contents of this tag. */\n  public get content(): string {\n    return this._attribute_token().content\n  }\n\n  /** '*' or '_' for emphasis, fence string for fence, etc. */\n  public get markup(): string {\n    return this._attribute_token().markup\n  }\n\n  public get info(): string {\n    /**fence infostring */\n    return this._attribute_token().info\n  }\n\n  /** A place for plugins to store an arbitrary data. */\n  public get meta(): any {\n    return this._attribute_token().meta\n  }\n\n  /** True for block-level tokens, false for inline tokens. */\n  public get block(): boolean {\n    return this._attribute_token().block\n  }\n\n  /** If it's true, ignore this element when rendering.\n    Used for tight lists to hide paragraphs. */\n  public get hidden(): boolean {\n    return this._attribute_token().hidden\n  }\n}\n","import React from 'react'\n\nimport SyntaxHighlighter from 'react-syntax-highlighter'\n\nimport MarkdownIt from 'markdown-it'\n\nimport SyntaxTreeNode from './tree'\n\nexport interface IParseOptions {\n  html?: boolean\n  xhtmlOut?: boolean\n  breaks?: boolean\n  langPrefix?: string\n  linkify?: boolean\n  typographer?: boolean\n  quotes?: string | string[]\n  highlight?: ((str: string, lang: string, attrs: string) => string) | null\n  [key: string]: any\n}\n\nexport interface IRenderProps {\n  node: SyntaxTreeNode\n  options?: IParseOptions\n  env?: any\n}\n\nexport default function MarkdownItRenderer(props: {\n  source: string\n  options?: IParseOptions\n}): JSX.Element {\n  const md = new MarkdownIt(props.options || {})\n  const env = {}\n  const tokens = md.parse(props.source, env)\n  const tree = new SyntaxTreeNode(tokens)\n  return <NodeChildren node={tree} options={props.options} env={env} />\n}\n\nfunction NodeChildren(props: IRenderProps): JSX.Element {\n  const rendered: JSX.Element[] = []\n  for (let index = 0; index < props.node.children.length; index++) {\n    const child = props.node.children[index]\n    if (child.hidden) {\n      // Tight list paragraphs\n      continue\n    }\n    switch (child.type) {\n      // Commonmark tokens\n      case 'paragraph':\n        rendered.push(<Paragraph key={index} node={child} />)\n        break\n      case 'inline':\n        rendered.push(<Inline key={index} node={child} />)\n        break\n      case 'text':\n        rendered.push(<Text key={index} node={child} />)\n        break\n      case 'bullet_list':\n        rendered.push(<BulletList key={index} node={child} />)\n        break\n      case 'ordered_list':\n        rendered.push(<OrderedList key={index} node={child} />)\n        break\n      case 'list_item':\n        rendered.push(<ListItem key={index} node={child} />)\n        break\n      case 'em':\n        rendered.push(<Em key={index} node={child} />)\n        break\n      case 'softbreak':\n        rendered.push(<Softbreak key={index} node={child} options={props.options} />)\n        break\n      case 'hardbreak':\n        rendered.push(<Hardbreak key={index} />)\n        break\n      case 'strong':\n        rendered.push(<Strong key={index} node={child} />)\n        break\n      case 'blockquote':\n        rendered.push(<Blockquote key={index} node={child} />)\n        break\n      case 'hr':\n        rendered.push(<Hr key={index} />)\n        break\n      case 'code_inline':\n        rendered.push(<CodeInline key={index} node={child} />)\n        break\n      case 'code_block':\n        rendered.push(<CodeBlock key={index} node={child} />)\n        break\n      case 'fence':\n        rendered.push(<Fence key={index} node={child} />)\n        break\n      case 'heading':\n        rendered.push(<Heading key={index} node={child} />)\n        break\n      case 'link':\n        rendered.push(<Link key={index} node={child} />)\n        break\n      case 'autolink':\n        rendered.push(<Autolink key={index} node={child} />)\n        break\n      case 'html_inline':\n        rendered.push(<HtmlInline key={index} node={child} />)\n        break\n      case 'html_block':\n        rendered.push(<HtmlBlock key={index} node={child} />)\n        break\n      case 'image':\n        rendered.push(<Image key={index} node={child} />)\n        break\n      // extended\n      case 's':\n        rendered.push(<StrikeThrough key={index} node={child} />)\n        break\n      case 'table':\n        rendered.push(<Table key={index} node={child} />)\n        break\n      case 'thead':\n        rendered.push(<TableHead key={index} node={child} />)\n        break\n      case 'tbody':\n        rendered.push(<TableBody key={index} node={child} />)\n        break\n      case 'tr':\n        rendered.push(<TableRow key={index} node={child} />)\n        break\n      case 'td':\n        rendered.push(<TableCell key={index} node={child} />)\n        break\n      case 'th':\n        rendered.push(<TableHeadCell key={index} node={child} />)\n        break\n      default:\n        console.error(`no render component for type ${child.type}`)\n    }\n  }\n  return <>{rendered}</>\n}\n\nfunction Paragraph(props: IRenderProps): JSX.Element {\n  return (\n    <p>\n      <NodeChildren node={props.node} />\n    </p>\n  )\n}\n\nfunction Inline(props: IRenderProps): JSX.Element {\n  return (\n    <>\n      <NodeChildren node={props.node} />\n    </>\n  )\n}\n\nfunction Text(props: IRenderProps): JSX.Element {\n  return <>{props.node.content}</>\n}\n\nfunction BulletList(props: IRenderProps): JSX.Element {\n  return (\n    <ul>\n      <NodeChildren node={props.node} />\n    </ul>\n  )\n}\n\nfunction OrderedList(props: IRenderProps): JSX.Element {\n  return (\n    <ol start={props.node.attrs.start as number | undefined}>\n      <NodeChildren node={props.node} />\n    </ol>\n  )\n}\n\nfunction ListItem(props: IRenderProps): JSX.Element {\n  return (\n    <li>\n      <NodeChildren node={props.node} />\n    </li>\n  )\n}\n\nfunction Em(props: IRenderProps): JSX.Element {\n  return (\n    <em>\n      <NodeChildren node={props.node} />\n    </em>\n  )\n}\n\nfunction Softbreak(props: IRenderProps): JSX.Element {\n  if (props.options?.breaks) {\n    return <br />\n  }\n  return <>{'\\n'}</>\n}\n\nfunction Hardbreak(): JSX.Element {\n  return <br />\n}\n\nfunction Strong(props: IRenderProps): JSX.Element {\n  return (\n    <strong>\n      <NodeChildren node={props.node} />\n    </strong>\n  )\n}\nfunction Blockquote(props: IRenderProps): JSX.Element {\n  return (\n    <blockquote>\n      <NodeChildren node={props.node} />\n    </blockquote>\n  )\n}\nfunction Hr(): JSX.Element {\n  return <hr />\n}\nfunction CodeInline(props: IRenderProps): JSX.Element {\n  return <code>{props.node.content}</code>\n}\nfunction CodeBlock(props: IRenderProps): JSX.Element {\n  return (\n    <pre>\n      <code>{props.node.content}</code>\n    </pre>\n  )\n}\nfunction Fence(props: IRenderProps): JSX.Element {\n  if (!props.node.info.trim()) {\n    return (\n      <pre>\n        <code>{props.node.content}</code>\n      </pre>\n    )\n  }\n  const info = props.node.info.trim().split(' ', 1)\n  const langName = info[0]\n  return <SyntaxHighlighter language={langName}>{props.node.content}</SyntaxHighlighter>\n}\nfunction Heading(props: IRenderProps): JSX.Element {\n  switch (props.node.tag) {\n    case 'h1':\n      return (\n        <h1>\n          <NodeChildren node={props.node} />\n        </h1>\n      )\n    case 'h2':\n      return (\n        <h2>\n          <NodeChildren node={props.node} />\n        </h2>\n      )\n    case 'h3':\n      return (\n        <h3>\n          <NodeChildren node={props.node} />\n        </h3>\n      )\n    case 'h4':\n      return (\n        <h4>\n          <NodeChildren node={props.node} />\n        </h4>\n      )\n    case 'h5':\n      return (\n        <h5>\n          <NodeChildren node={props.node} />\n        </h5>\n      )\n    case 'h6':\n      return (\n        <h6>\n          <NodeChildren node={props.node} />\n        </h6>\n      )\n    default:\n      console.error(`unexpected tag: ${props.node.tag}`)\n  }\n  return <></>\n}\nfunction Link(props: IRenderProps): JSX.Element {\n  return (\n    <a href={props.node.attrs.href ? `${props.node.attrs.href}` : undefined}>\n      <NodeChildren node={props.node} />\n    </a>\n  )\n}\nfunction Autolink(props: IRenderProps): JSX.Element {\n  return (\n    <a href={props.node.attrs.href ? `${props.node.attrs.href}` : undefined}>\n      <NodeChildren node={props.node} />\n    </a>\n  )\n}\nfunction HtmlInline(props: IRenderProps): JSX.Element {\n  // TODO weirdly here it is splitting e.g. <em>a</em> into html+text+html\n  // it doesn't do this for block HTML\n  return (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: `<${props.node.tag}>${props.node.content}</${props.node.tag}>`\n      }}\n    />\n  )\n}\nfunction HtmlBlock(props: IRenderProps): JSX.Element {\n  // TODO see HtmlInline\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html: `<${props.node.tag}>${props.node.content}</${props.node.tag}>`\n      }}\n    />\n  )\n}\nfunction Image(props: IRenderProps): JSX.Element {\n  return (\n    <img\n      alt={props.node.content}\n      src={props.node.attrs.src ? `${props.node.attrs.src}` : undefined}\n    />\n  )\n}\nfunction StrikeThrough(props: IRenderProps): JSX.Element {\n  return (\n    <s>\n      <NodeChildren node={props.node} />\n    </s>\n  )\n}\nfunction Table(props: IRenderProps): JSX.Element {\n  return (\n    <table>\n      <NodeChildren node={props.node} />\n    </table>\n  )\n}\nfunction TableHead(props: IRenderProps): JSX.Element {\n  return (\n    <thead>\n      <NodeChildren node={props.node} />\n    </thead>\n  )\n}\nfunction TableBody(props: IRenderProps): JSX.Element {\n  return (\n    <tbody>\n      <NodeChildren node={props.node} />\n    </tbody>\n  )\n}\nfunction TableRow(props: IRenderProps): JSX.Element {\n  return (\n    <tr>\n      <NodeChildren node={props.node} />\n    </tr>\n  )\n}\nfunction TableCell(props: IRenderProps): JSX.Element {\n  const style: { textAlign?: 'center' | 'left' | 'right' } = {}\n  if (typeof props.node.attrs.style === 'string') {\n    if (props.node.attrs.style.endsWith('center')) {\n      style.textAlign = 'center'\n    } else if (props.node.attrs.style.endsWith('left')) {\n      style.textAlign = 'left'\n    } else if (props.node.attrs.style.endsWith('right')) {\n      style.textAlign = 'right'\n    }\n  }\n  return (\n    <td style={style}>\n      <NodeChildren node={props.node} />\n    </td>\n  )\n}\nfunction TableHeadCell(props: IRenderProps): JSX.Element {\n  const style = {}\n  if (props.node.attrs.style) {\n  }\n  return (\n    <th style={style}>\n      <NodeChildren node={props.node} />\n    </th>\n  )\n}\n","import { useState } from 'react'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\n\nexport const useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    }\n  })\n)\n\nexport function useForm(initValues: {\n  [key: string]: any\n}): [{ [key: string]: any }, (e: any, checked: boolean) => void, () => void] {\n  const [values, setValues] = useState(initValues)\n  return [\n    values,\n    (e: any, checked: boolean) => {\n      setValues({ ...values, [e.target.name]: checked })\n    },\n    () => setValues(initValues)\n  ]\n}\n","// annoyingly we are restricted to es5 which does not have multiline strings\nexport const defaultText =\n  '\\\n# h1 Heading\\n\\\n## h2 Heading\\n\\\n### h3 Heading\\n\\\n#### h4 Heading\\n\\\n##### h5 Heading\\n\\\n###### h6 Heading\\n\\\n\\n\\\n\\n\\\n## Horizontal Rules\\n\\\n\\n\\\n___\\n\\\n\\n\\\n---\\n\\\n\\n\\\n***\\n\\\n\\n\\\n\\n\\\n## Typographic replacements\\n\\\n\\n\\\nEnable typographer option to see result.\\n\\\n\\n\\\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\\n\\\n\\n\\\ntest.. test... test..... test?..... test!....\\n\\\n\\n\\\n!!!!!! ???? ,,  -- ---\\n\\\n\\n\\\n\"Smartypants, double quotes\" and \\'single quotes\\'\\n\\\n\\n\\\n\\n\\\n## Emphasis\\n\\\n\\n\\\n**This is bold text**\\n\\\n\\n\\\n__This is bold text__\\n\\\n\\n\\\n*This is italic text*\\n\\\n\\n\\\n_This is italic text_\\n\\\n\\n\\\n~~Strikethrough~~\\n\\\n\\n\\\n\\n\\\n## Blockquotes\\n\\\n\\n\\\n\\n\\\n> Blockquotes can also be nested...\\n\\\n>> ...by using additional greater-than signs right next to each other...\\n\\\n> > > ...or with spaces between arrows.\\n\\\n\\n\\\n\\n\\\n## Lists\\n\\\n\\n\\\nUnordered\\n\\\n\\n\\\n+ Create a list by starting a line with `+`, `-`, or `*`\\n\\\n+ Sub-lists are made by indenting 2 spaces:\\n\\\n  - Marker character change forces new list start:\\n\\\n    * Ac tristique libero volutpat at\\n\\\n    + Facilisis in pretium nisl aliquet\\n\\\n    - Nulla volutpat aliquam velit\\n\\\n+ Very easy!\\n\\\n\\n\\\nOrdered\\n\\\n\\n\\\n1. Lorem ipsum dolor sit amet\\n\\\n2. Consectetur adipiscing elit\\n\\\n3. Integer molestie lorem at massa\\n\\\n\\n\\\n\\n\\\n1. You can use sequential numbers...\\n\\\n1. ...or keep all the numbers as `1.`\\n\\\n\\n\\\nStart numbering with offset:\\n\\\n\\n\\\n57. foo\\n\\\n1. bar\\n\\\n\\n\\\n\\n\\\n## Code\\n\\\n\\n\\\nInline `code`\\n\\\n\\n\\\nIndented code\\n\\\n\\n\\\n    // Some comments\\n\\\n    line 1 of code\\n\\\n    line 2 of code\\n\\\n    line 3 of code\\n\\\n\\n\\\n\\n\\\nBlock code \"fences\"\\n\\\n\\n\\\n```\\n\\\nSample text here...\\n\\\n```\\n\\\n\\n\\\nSyntax highlighting\\n\\\n\\n\\\n``` js\\n\\\nvar foo = function (bar) {\\n\\\n  return bar++;\\n\\\n};\\n\\\n\\n\\\nconsole.log(foo(5));\\n\\\n```\\n\\\n\\n\\\n## Tables\\n\\\n\\n\\\n| Option | Description |\\n\\\n| ------ | ----------- |\\n\\\n| data   | path to data files to supply the data that will be passed into templates. |\\n\\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n\\\n| ext    | extension to be used for dest files. |\\n\\\n\\n\\\nRight aligned columns\\n\\\n\\n\\\n| Option | Description |\\n\\\n| ------:| -----------:|\\n\\\n| data   | path to data files to supply the data that will be passed into templates. |\\n\\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n\\\n| ext    | extension to be used for dest files. |\\n\\\n\\n\\\n\\n\\\n## Links\\n\\\n\\n\\\n[link text](http://dev.nodeca.com)\\n\\\n\\n\\\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\\n\\\n\\n\\\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\\n\\\n\\n\\\n\\n\\\n## Images\\n\\\n\\n\\\n![Minion](https://octodex.github.com/images/minion.png)\\n\\\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\\n\\\n\\n\\\nLike links, Images also have a footnote style syntax\\n\\\n\\n\\\n![Alt text][id]\\n\\\n\\n\\\nWith a reference later in the document defining the URL location:\\n\\\n\\n\\\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\\n\\\n\\n\\\n'\n","import React, { useState } from 'react'\n\nimport {\n  AppBar,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  Paper,\n  TextField,\n  Toolbar,\n  Tooltip,\n  Typography,\n  useTheme\n} from '@material-ui/core'\nimport { Restore } from '@material-ui/icons'\n\nimport MarkdownItRenderer from './renderer/renderBase'\n\nimport { useStyles, useForm } from './hooks'\nimport { defaultText } from './defaultText'\n\nconst options: { [key: string]: { default: boolean; tooltip?: string } } = {\n  html: {\n    default: false,\n    tooltip: 'enable HTML tags in source text'\n  },\n  // xhtmlOut: { default: false, tooltip: 'produce xhtml output' },\n  // breaks: { default: false, tooltip: 'newlines in paragraphs are rendered as <br />' },\n  linkify: { default: true, tooltip: 'auto-convert link text to links' },\n  typographer: { default: true, tooltip: 'do typographic replacements' }\n}\n\nfunction App(): JSX.Element {\n  const theme = useTheme()\n  const classes = useStyles()\n\n  const [sourceText, setSourceText] = useState(defaultText)\n\n  const handleSourceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSourceText(event.target.value)\n  }\n\n  const defaultOptions = Object.entries(options).reduce((p, [k, v]) => {\n    p[k] = v.default\n    return p\n  }, {} as any)\n\n  const [parseOptions, setParseOptions, resetParseOptions] = useForm(defaultOptions)\n\n  function reset(): void {\n    setSourceText(defaultText)\n    resetParseOptions()\n  }\n\n  return (\n    <div className={classes.root}>\n      <TopBar />\n      <Paper style={{ padding: theme.spacing(2) }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Paper variant=\"outlined\" style={{ padding: theme.spacing(2) }}>\n              <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Parsing Options</FormLabel>\n                <FormGroup aria-label=\"position\" row>\n                  {Object.entries(options).map(([key, value]) => (\n                    <Tooltip key={key} title={value.tooltip || ''}>\n                      <FormControlLabel\n                        label={key}\n                        control={\n                          <Checkbox\n                            color=\"primary\"\n                            name={key}\n                            checked={parseOptions[key]}\n                            onChange={setParseOptions}\n                          />\n                        }\n                      />\n                    </Tooltip>\n                  ))}\n                </FormGroup>\n              </FormControl>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  reset()\n                }}\n                startIcon={<Restore />}\n                style={{ float: 'right' }}\n              >\n                Reset\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper\n              // variant=\"outlined\"\n              style={{ padding: theme.spacing(2) }}\n            >\n              <TextField\n                id=\"standard-textarea\"\n                label=\"Source Text\"\n                variant=\"outlined\"\n                placeholder=\"Write text here\"\n                multiline\n                fullWidth\n                value={sourceText}\n                onChange={handleSourceChange}\n                rowsMax={50}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper\n              variant=\"outlined\"\n              style={{\n                padding: theme.spacing(2),\n                height: '80vh',\n                overflow: 'auto'\n              }}\n            >\n              <MarkdownItRenderer source={sourceText} options={parseOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  )\n}\n\nfunction TopBar() {\n  const classes = useStyles()\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          MyST Demonstrator\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}